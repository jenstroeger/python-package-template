# This is a trusted builder implemented as a reusable workflow that can be called by other
# Actions workflows. It checks, tests, and builds the artifacts including SBOM and documentations,
# and computes hash digests as output to be used by a SLSA provenance generator. The artifacts are always uploaded
# for every job to be used for debugging purposes, but they will be removed within the specified retention days.
# Even though we run the build in a matrix to check against different platforms, due to a known limitation of
# reusable workflows that do not support setting strategy property from the caller workflow, we
# only generate artifacts for ubuntu-latest and Python 3.10, which can be used to create a release.
# See: https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations.

name: Build the package
on:
  workflow_call:
    inputs:
      is_release_build: # To determine the context in which the build workflow is called.
        required: true
        type: boolean
    outputs:
      artifacts-sha256:
        description: The hash of the artifacts
        value: ${{ jobs.build.outputs.artifacts-sha256 }}
permissions:
  contents: read
env:
  ARTIFACT_OS: ubuntu-latest # The default OS for release.
  ARTIFACT_PYTHON: '3.10' # The default Python version for release.

jobs:
  build:
    outputs:
      artifacts-sha256: ${{ steps.compute-hash.outputs.artifacts-sha256 }}
    name: Build Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # It is recommended to pin a Runner version specifically:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ['3.9', '3.10']
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@dd2c410b088af7c0dc8046f3ac9a8f4148492a95 # v1.4.5
      with:
        egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
    - name: Check out repository
      if: inputs.is_release_build == false
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
      with:
        fetch-depth: 0
    # If the workflow is called for a release, we need to check out the main
    # branch, which contains the release bump commit.
    - name: Check out for release
      if: inputs.is_release_build == true
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
      with:
        fetch-depth: 0
        ref: main
    - name: Set up Python
      uses: actions/setup-python@b55428b1882923874294fa556849718a1d7f2ca5 # v4.2.0
      with:
        python-version: ${{ matrix.python }}
    # Using the Makefile assumes an activated virtual environment, which doesn't exist
    # when running in an Action environment (https://github.com/actions/setup-python/issues/359).
    # Instead we create an empty .venv folder so that the Makefile continues to function
    # while Python operates within the runner's global environment. It is safe to ignore
    # warnings from the Makefile about the missing virtual environment.
    - name: Create empty virtual environment for Actions
      run: mkdir .venv
    - name: Install dependencies
      run: make setup
    - name: Build the package
      # We don't need to check and test the package separately because `make dist` runs
      # those targets first and only builds the package if they succeed.
      # Build the sdist and wheel distribution of the package and docs as a zip file.
      run: make dist
    - name: Compute package hash
      if: matrix.os == env.ARTIFACT_OS && matrix.python == env.ARTIFACT_PYTHON
      id: compute-hash
      shell: bash
      run: |
        set -euo pipefail
        # Generate the requirements.txt that contains the hash digests of the dependencies and
        # generate the SBOM using CyclonDX SBOM generator.
        make requirements sbom
        # Remove the old requirements.txt file (which includes _all_ packages) and generate a
        # new one for the package and its actual and required dependencies only.
        rm requirements.txt
        make prune requirements
        # Find the paths to the files that will be included in the release.
        TARBALL_PATH=$(find dist -name "*.tar.gz")
        WHEEL_PATH=$(find dist -name "*.whl")
        REQUIREMENTS_PATH=$(find dist -name "*-requirements.txt")
        SBOM_PATH=$(find dist -name "*-sbom.json")
        HTML_DOCS_PATH=$(find dist -name *-docs-html.zip)
        BUILD_EPOCH_PATH=$(find dist -name *-build-epoch.txt)
        # Compute the sha digest for all the release files and encode them using base64.
        DIGEST=$(sha256sum $TARBALL_PATH $WHEEL_PATH $REQUIREMENTS_PATH $SBOM_PATH $HTML_DOCS_PATH $BUILD_EPOCH_PATH | base64 -w0)
        echo "Digest of artifacts is $DIGEST."
        # Set the computed sha digest as the output of this job.
        echo "::set-output name=artifacts-sha256::$DIGEST"
    - name: Upload the package artifact
      # For now only generate artifacts for the specified OS and Python version in env variables.
      # Currently reusable workflows do not support setting strategy property from the caller workflow.
      if: matrix.os == env.ARTIFACT_OS && matrix.python == env.ARTIFACT_PYTHON
      uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
      with:
        name: artifact-${{ matrix.os }}-python-${{ matrix.python }}
        path: dist
        if-no-files-found: error
        retention-days: 1

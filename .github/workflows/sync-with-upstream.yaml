# Create a PR to sync with the upstream template repo.
# The template repo is https://github.com/jenstroeger/python-package-template.

name: Sync with template repository
on:
  schedule:
  - cron: 11 11 * * *

permissions:
  contents: read
env:
  # This is the username and email for the user who creates a branch and commits
  # the changes. In an organisation that should be a dedicated devops account.
  USER_NAME: jenstroeger
  USER_EMAIL: jenstroeger@users.noreply.github.com

jobs:
  sync:
    if: github.repository != 'jenstroeger/python-package-template'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

    - name: Check out template repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      with:
        # If you decide to change the upstream template repository to a private one, uncomment
        # the following argument to pass the required token to be able to check it out.
        # token: ${{ secrets.<TEMPLATE_REPO_TOKEN> }}
        repository: jenstroeger/python-package-template
        fetch-depth: 0
        path: template

    - name: Check out current repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        fetch-depth: 0
        ref: main
        path: repo

    - name: Sync with template
      env:
        GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        LATEST_VERSION=$(cd template && git describe --tags --abbrev=0)
        CURRENT_VERSION=$(test -f repo/.github/workflows/.template_version \
          && cat repo/.github/workflows/.template_version || echo "v0.0.0")
        echo "Latest version is $LATEST_VERSION and current version is $CURRENT_VERSION."

        if [ "$CURRENT_VERSION" == "$LATEST_VERSION" ]; then
          echo "Unable to find a new version, exiting..."
        else

          # Copy the files from the template to the current repo.
          rsync --recursive --verbose --verbose --exclude tests/ --exclude src/ --exclude docs/source/ \
            --exclude CHANGELOG.md --exclude CODEOWNERS --exclude LICENSE.md --exclude README.md --exclude SECURITY.md \
            --exclude .git/ --exclude .github/workflows/.template_version template/ repo/

          cd repo

          # Check if the branch exists in the current repo.
          if [ "$(git rev-parse --verify origin/sync-"""$LATEST_VERSION""" 2>/dev/null)" ]; then
            echo "Branch sync-$LATEST_VERSION already exists. Exiting..."
            exit 0
          fi

          # Create a branch, commit, and push the changeset.
          git checkout -b sync-"$LATEST_VERSION"
          echo "$LATEST_VERSION" > .github/workflows/.template_version
          git add .
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"
          git config --list --global # For debug purposes.
          git commit --message "chore: sync with template"
          git push --set-upstream origin sync-"$LATEST_VERSION"

          # Create the pull request.
          gh pr create --base main --title "chore: sync with package template $LATEST_VERSION" \
            --body "This PR was automatically generated." --head sync-"$LATEST_VERSION"
        fi
